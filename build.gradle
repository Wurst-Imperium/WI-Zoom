buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:1.326'
	}
}

plugins {
	id "fabric-loom" version "1.8-SNAPSHOT"
	id "me.modmuss50.mod-publish-plugin" version "0.5.2"
	id "com.diffplug.spotless" version "6.25.0"
}

def ENV = System.getenv()

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

// Override vulnerable dependencies until Minecraft updates to newer versions
configurations.all {
	resolutionStrategy {
		// v1.15.0, used by Minecraft 1.21.2 and 1.21.3, is vulnerable to CVE-2024-35255
		force "com.microsoft.azure:msal4j:1.17.2"
		// v4.1.97.Final, used by Minecraft 1.21 - 1.21.3, is vulnerable to CVE-2024-47535
		force "io.netty:netty-common:4.1.115.Final"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	
	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version
	
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.20.5 (24w14a) upwards uses Java 21.
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
	
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

spotless {
	lineEndings("WINDOWS")
	java {
		removeUnusedImports()
		indentWithTabs()
		trimTrailingWhitespace()
		eclipse().configFile(file("codestyle/formatter.xml"))
	}
	json {
		target "src/**/*.json"
		gson().indentWithSpaces(2).version("2.10.1")
	}
}

publishMods {
	file = remapJar.archiveFile
	def versionString = project.version as String
	def ghVersion = "v" + versionString.substring(0, versionString.indexOf("-"))
	def changelogUrl = "https://www.wimods.net/wi-zoom/wi-zoom-1-5/"
	def archivesName = project.base.archivesName.get() as String
	additionalFiles.from(
		file("${project.buildDir}/libs/${archivesName}-${versionString}-sources.jar"),
	)
	type = ghVersion.contains("pre") ? BETA : STABLE
	modLoaders.add("fabric")
	
	curseforge {
		projectId = "349630"
		accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
		minecraftVersions.add("${project.cf_game_version}")
		requires("fabric-api")
		changelog = "A changelog can be found at: [${changelogUrl}](${changelogUrl}?mc=${project.minecraft_version}&utm_source=CurseForge&utm_medium=WI+Zoom&utm_campaign=Changelog&utm_content=CurseForge+WI+Zoom+MC${project.minecraft_version})"
	}
	modrinth {
		projectId = "o7DitHWP"
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		minecraftVersions.add("${project.minecraft_version}")
		requires("fabric-api")
		changelog = "A changelog can be found at: [${changelogUrl}](${changelogUrl}?mc=${project.minecraft_version}&utm_source=Modrinth&utm_medium=WI+Zoom&utm_campaign=Changelog&utm_content=Modrinth+WI+Zoom+MC${project.minecraft_version})"
	}
}

afterEvaluate {
	tasks.publishMods.dependsOn build
	tasks.publishCurseforge.dependsOn build
	tasks.publishModrinth.dependsOn build
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

task github(dependsOn: build) {
	onlyIf {
		ENV.GITHUB_TOKEN
	}
	
	doLast {
		def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
		def repository = github.getRepository("Wurst-Imperium-MCX/WI-Zoom")
		def ghVersion = "v" + version.substring(0, version.indexOf("-"))
		
		def ghRelease = repository.getReleaseByTagName(ghVersion as String)
		if(ghRelease == null) {
			def releaseBuilder = new GHReleaseBuilder(repository, ghVersion as String)
			ghRelease = releaseBuilder.create()
		}
		
		ghRelease.uploadAsset(remapJar.archiveFile.get().getAsFile(), "application/java-archive")
		ghRelease.uploadAsset(remapSourcesJar.archiveFile.get().getAsFile(), "application/java-archive")
	}
}

import java.time.LocalDate
import org.kohsuke.github.GHIssueState
import org.kohsuke.github.GHMilestoneState
import java.time.ZoneId

task closeMilestone {
	onlyIf {
		ENV.GITHUB_TOKEN
	}
	
	doLast {
		def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
		def repository = github.getRepository("Wurst-Imperium/WI-Zoom")
		def ghVersion = "v" + version.substring(0, version.indexOf("-MC"))
		def versionSlug = ghVersion.substring(1).replace('.', '-')
		
		// Weird API design: listMilestones() requires GHIssueState while everything else uses GHMilestoneState.
		def milestone = repository.listMilestones(GHIssueState.ALL).find { it.title == ghVersion }
		if (milestone == null) {
			milestone = repository.createMilestone(ghVersion, "")
		}
		
		if (milestone.getState() != GHMilestoneState.CLOSED) {
			milestone.setDueOn(Date.from(LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant()))
			milestone.setDescription("https://wimods.net/wi-zoom/wi-zoom-${versionSlug}/")
			milestone.close()
		}
	}
}

task uploadBackups {
	dependsOn build
	
	onlyIf {
		ENV.WI_BACKUPS_API_KEY
	}
	
	doLast {
		def shortVersion = version.substring(0, version.indexOf("-MC"))
		def backupUrl = "https://api.wurstclient.net/artifact-backups/WI-Zoom/${shortVersion}"
		
		def connection = new URL(backupUrl).openConnection() as HttpURLConnection
		def boundary = UUID.randomUUID().toString()
		connection.setRequestMethod("POST")
		connection.setRequestProperty("X-API-Key", ENV.WI_BACKUPS_API_KEY)
		connection.setRequestProperty("Accept", "application/json")
		connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=$boundary")
		connection.doOutput = true
		
		def output = connection.outputStream
		[remapJar, remapSourcesJar].each { jarTask ->
			def file = jarTask.archiveFile.get().asFile
			output << "--${boundary}\r\n"
			output << "Content-Disposition: form-data; name=\"files\"; filename=\"${file.name}\"\r\n"
			output << "Content-Type: application/java-archive\r\n\r\n"
			file.withInputStream { input -> 
				output << input
			}
			output << "\r\n"
		}
		output << "--${boundary}--\r\n"
		output.flush()
		
		if(connection.responseCode != 200)
			throw new GradleException("Failed to upload backups: ${connection.responseCode} ${connection.responseMessage}")
	}
}
